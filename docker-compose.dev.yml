services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: nestdocs-postgres-dev
    environment:
      POSTGRES_DB: nestdocs
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - nestdocs-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Microservices & Caching
  redis:
    image: redis:7-alpine
    container_name: nestdocs-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - nestdocs-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # NestJS App (Development with hot-reload)
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: nestdocs-app-dev
    ports:
      - "3000:3000"
      - "9229:9229"  # Debug port
    environment:
      NODE_ENV: development
      DB_TYPE: postgres
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: password
      DB_DATABASE: nestdocs
      REDIS_HOST: redis
      REDIS_PORT: 6379
    volumes:
      - .:/app
      - /app/node_modules  # Prevent overwriting node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - nestdocs-network
    command: npm run start:dev

volumes:
  postgres_data:
  redis_data:

networks:
  nestdocs-network:
    driver: bridge
